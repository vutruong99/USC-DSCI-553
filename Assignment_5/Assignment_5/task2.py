import sys
from blackbox import BlackBox
import random
import binascii
from statistics import median, mean

def myhashs(s):
    result = []
    s = int(binascii.hexlify(s.encode('utf8')), 16)
    hash_function_list = [(2026553985, 3027316077, 7202218937, 69997),
(1952871652, 84098000, 7202218937, 69997),
(1944661340, 4057537485, 7202218937, 69997),
(1760526589, 1471070915, 7202218937, 69997),
(6542982033, 3417080904, 7202218937, 69997),
(7166952840, 2763437613, 7202218937, 69997),
(3815919194, 2216657532, 7202218937, 69997),
(748235138, 6568979665, 7202218937, 69997),
(3539990859, 2751852868, 7202218937, 69997),
(6957589572, 4146510825, 7202218937, 69997),
(6747232504, 3804337097, 7202218937, 69997),
(120219812, 3426408386, 7202218937, 69997),
(5058430469, 5266886485, 7202218937, 69997),
(6619109562, 5187308247, 7202218937, 69997),
(1829278293, 4547974375, 7202218937, 69997),
(1476316385, 3530925122, 7202218937, 69997),
(5473463316, 2396336593, 7202218937, 69997),
(4008012291, 5432076176, 7202218937, 69997),
(801468023, 2536645454, 7202218937, 69997),
(3679318224, 6889861465, 7202218937, 69997),
(973226177, 2913897484, 7202218937, 69997),
(892142185, 1807554210, 7202218937, 69997),
(6612941159, 4811609820, 7202218937, 69997),
(211278690, 6469489834, 7202218937, 69997),
(5390732925, 825679393, 7202218937, 69997),
(7057862768, 1443031829, 7202218937, 69997),
(999122457, 506222421, 7202218937, 69997),
(7133666405, 3939263362, 7202218937, 69997),
(2291906318, 2841317164, 7202218937, 69997),
(6403275693, 6015258726, 7202218937, 69997),
(5554538940, 6584165025, 7202218937, 69997),
(5545937692, 1634434619, 7202218937, 69997),
(1830277929, 1649597006, 7202218937, 69997),
(4274292100, 3854943733, 7202218937, 69997),
(6835829422, 3790432554, 7202218937, 69997),
(4050060594, 5922110337, 7202218937, 69997),
(4225588992, 2342012265, 7202218937, 69997),
(1872721998, 5188420859, 7202218937, 69997),
(3888852280, 897099506, 7202218937, 69997),
(1481301818, 6501319462, 7202218937, 69997),
(3349515703, 1838873946, 7202218937, 69997),
(4179172968, 4425050416, 7202218937, 69997),
(4370396552, 3689854176, 7202218937, 69997),
(2937488990, 6382922021, 7202218937, 69997),
(3966280726, 4533196676, 7202218937, 69997),
(3652656075, 250477106, 7202218937, 69997),
(1418786358, 2150856987, 7202218937, 69997),
(6759776329, 1627679064, 7202218937, 69997),
(6582653017, 6298607503, 7202218937, 69997),
(6440096762, 4725739237, 7202218937, 69997),
(3680751036, 1881772301, 7202218937, 69997),
(5895797940, 5590505002, 7202218937, 69997),
(5659433875, 416638349, 7202218937, 69997),
(2771746282, 346449320, 7202218937, 69997),
(19077554, 2556843492, 7202218937, 69997),
(4670061838, 2402532414, 7202218937, 69997),
(169683821, 6367157149, 7202218937, 69997),
(1582264121, 6042916365, 7202218937, 69997),
(495010036, 5047136, 7202218937, 69997),
(2339740043, 2159054683, 7202218937, 69997),
(5539535641, 3805322388, 7202218937, 69997),
(6225155781, 3720726961, 7202218937, 69997),
(6150822410, 5652480522, 7202218937, 69997),
(6958141561, 2971600702, 7202218937, 69997),
(3794449870, 6793865833, 7202218937, 69997),
(6782680221, 2437161020, 7202218937, 69997),
(525502581, 4613534194, 7202218937, 69997),
(5549432939, 1707194459, 7202218937, 69997),
(6420588580, 6802884788, 7202218937, 69997),
(4176698391, 3282677674, 7202218937, 69997),
(40866496, 1646940412, 7202218937, 69997),
(485552235, 4001276210, 7202218937, 69997),
(2836301237, 3033830704, 7202218937, 69997),
(3881964999, 4121499692, 7202218937, 69997),
(3455557885, 1478872352, 7202218937, 69997),
(6777695491, 6049767758, 7202218937, 69997),
(784790350, 6158464114, 7202218937, 69997),
(6870422241, 6604184657, 7202218937, 69997),
(1819147129, 3368945832, 7202218937, 69997),
(3484792023, 4314750966, 7202218937, 69997),
(1329363938, 3920054538, 7202218937, 69997),
(696880670, 2281409670, 7202218937, 69997),
(2403016235, 646138904, 7202218937, 69997),
(6915883053, 6210995490, 7202218937, 69997),
(5943535614, 40239375, 7202218937, 69997),
(2592043122, 6934060873, 7202218937, 69997),
(6497640869, 7077359787, 7202218937, 69997),
(4834761333, 5305162177, 7202218937, 69997),
(6302714515, 3539848833, 7202218937, 69997),
(6777104472, 3982069189, 7202218937, 69997),
(3114952797, 2709836862, 7202218937, 69997),
(5300943626, 6095136267, 7202218937, 69997),
(5554017131, 5935289764, 7202218937, 69997),
(4922447488, 6255463829, 7202218937, 69997),
(3003874103, 1695668310, 7202218937, 69997),
(905282161, 927382324, 7202218937, 69997),
(2712850031, 3838378097, 7202218937, 69997),
(6940941249, 3182876880, 7202218937, 69997),
(5604331426, 1881782623, 7202218937, 69997),
(895409579, 7094804896, 7202218937, 69997),]

    for f in hash_function_list:
        a = f[0]
        b = f[1]
        p = f[2]
        m = f[3]
        result.append(bin(((a * s + b) % p) % m))

    return result

if __name__ == "__main__":
    input_file_path = sys.argv[1]
    stream_size = int(sys.argv[2])
    num_of_asks = int(sys.argv[3])
    output_file_path = sys.argv[4]

    results = []
    bx = BlackBox()
    k = 100
    sum_es = 0
    sum_real = 0
    for _ in range(num_of_asks):
        stream_users = bx.ask(input_file_path, stream_size)
        max_trailing_zeroes = [0] * k

        for user in stream_users:
            binary_strings = myhashs(user)
            for i, binary_string in enumerate(binary_strings):
                count = 0
                for j in reversed(binary_string):
                    if j == "0":
                        count +=1
                    else:
                        break
                if count >= max_trailing_zeroes[i]:
                    max_trailing_zeroes[i] = count

        medians = []

        for i in range(0,k,20):
            medians.append(median(max_trailing_zeroes[i:i+20]))

        average_of_medians = mean(medians)

        estimation_value = int(2**average_of_medians)

        results.append((_,len(set(stream_users)), estimation_value))

    with open(output_file_path, "w") as f:
        f.writelines("Time,Ground Truth,Estimation")
        f.write("\n")
        for item in results:
            f.writelines(str(item[0]) + "," + str(item[1]) + "," + str(item[2]))
            f.write("\n")